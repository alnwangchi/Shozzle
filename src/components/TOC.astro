---
interface HeadingProps {
  depth: number;
  text: string;
  slug: string;
  children: Array<HeadingProps>;
}

export type Props = {
  pageHeadings: Array<HeadingProps>;
};

const { pageHeadings } = Astro.props;
---

<ul class="toc">
  {
    pageHeadings?.map((item) => (
      <li>
        <a
          href={`#${item.slug}`}
          style={{ paddingInlineStart: item.depth === 3 ? '2rem' : 'none' }}
        >
          {item.text}
        </a>
        {item.children.length ? <Astro.self pageHeadings={item.children} /> : ''}
      </li>
    ))
  }
</ul>

<script>
  const setCurrentHeading: IntersectionObserverCallback = (entries) => {
    for (let entry of entries) {
      const { id } = entry.target;

      // 找到所有toc底下的a elements
      const tocLinkEl = document.querySelector(`.toc a[href='#${id}']`);

      if (!tocLinkEl) return;

      if (entry.isIntersecting) {
        document.querySelectorAll('.toc a').forEach((e) => e.classList.remove('active'));

        tocLinkEl.classList.add('active');
      }
    }
  };

  // rootMargin 負越多代表觸發的越慢（負越多代表heading要到畫面的越上面才會被觸發）
  const observerOptions = {
    threshold: 1,
    rootMargin: '0px 0px -60%'
  };

  const observer = new IntersectionObserver(setCurrentHeading, observerOptions);
  const elToObserve = document.querySelectorAll('h2, h3');
  elToObserve.forEach((el) => observer.observe(el));
</script>
